ext {

    // Version
    androidXVersion = '1.0.0'
    multidexVersion = "2.0.1"
    constraintlayoutVersion = '1.1.3'
    rxJavaVersion = '3.0.2'
    rxAndroidVersion = '3.0.0'
    daggerVersion = '2.27'
    retrofitVersion = '2.8.1'
    okHttpVersion = '3.12.1'
    roomVersion = '2.2.3'
    gsonVersion = '2.8.0'

    glideVersion = '4.11.0'

    stethoVersion = '1.5.1'

    junitVersion = '4.12'
    mockitoVersion = '1.10.19'
    hamcrestVersion = '1.1'
    robolectricVersion = '3.0'

    // Package
    supportPackage = 'com.android.support'
    reactivePackage = 'io.reactivex.rxjava3'
    daggerPackage = 'com.google.dagger'
    retrofitPackage = 'com.squareup.retrofit2'
    okHttpVersionPackage = 'com.squareup.okhttp3'
    roomPackage = 'androidx.room'
    gsonPackage = 'com.google.code.gson'

    glidePackage = 'com.github.bumptech.glide'

    stethoPackage = 'com.facebook.stetho'

    junitPackage = 'junit'
    mockitoPackage = 'org.mockito'
    hamcrestPackage = 'org.hamcrest'

    // Dependency
    AndroidXdependencies = [
            material         : buildDependency('com.google.android.material', 'material', '1.0.0'),
            annotation       : buildDependency('androidx.annotation', 'annotation', androidXVersion),
            appCompat        : buildDependency('androidx.appcompat', 'appcompat', androidXVersion),
            multidex         : buildDependency('androidx.multidex', 'multidex', multidexVersion),
            constraintlayout : buildDependency('androidx.constraintlayout', 'constraintlayout', constraintlayoutVersion)
    ]

    RxDependencies = [
            rxJava   : buildDependency(reactivePackage, 'rxjava', rxJavaVersion),
            rxAndroid: buildDependency(reactivePackage, 'rxandroid', rxAndroidVersion),
            rxBridge : buildDependency('com.github.akarnokd', 'rxjava3-bridge', '3.0.0')]

    DaggerDependencies = [
            dagger                : buildDependency(daggerPackage, 'dagger', daggerVersion),
            daggerCompiler        : buildDependency(daggerPackage, 'dagger-compiler', daggerVersion),
            daggerAndroidSupport  : buildDependency(daggerPackage, 'dagger-android-support', daggerVersion),
            daggerAndroidProcessor: buildDependency(daggerPackage, 'dagger-android-processor', daggerVersion)]

    RetrofitDependencies = [
            retrofit      : buildDependency(retrofitPackage, 'retrofit', retrofitVersion),
            converterGson : buildDependency(retrofitPackage, 'converter-gson', retrofitVersion),
            adapterRxjava2: buildDependency(retrofitPackage, 'adapter-rxjava2', retrofitVersion)]

    OkhttpDependencies = [
            okhttp             : buildDependency(okHttpVersionPackage, 'okhttp', okHttpVersion),
            loggingInterceptor : buildDependency(okHttpVersionPackage, 'logging-interceptor', okHttpVersion)]

    RoomDependencies = [
            runtime  : buildDependency(roomPackage, 'room-runtime', roomVersion),
            compiler : buildDependency(roomPackage, 'room-compiler', roomVersion),
            rxjava2  : buildDependency(roomPackage, 'room-rxjava2', roomVersion)]

    Gson = buildDependency(gsonPackage, 'gson', gsonVersion)

    GlideDependencies =  [
            core     : buildDependency(glidePackage, 'glide', glideVersion),
            compiler : buildDependency(glidePackage, 'compiler', glideVersion)]

    StethoDependencies = [
            core   : buildDependency(stethoPackage, 'stetho', stethoVersion),
            okhttp : buildDependency(stethoPackage, 'stetho-okhttp3', stethoVersion)]

    TestingDependencies = [
            junit      : buildDependency(junitPackage, 'junit', junitVersion),
            mockito    : buildDependency(mockitoPackage, 'mockito-core', mockitoVersion),
            hamcrest   : buildDependency(hamcrestPackage, 'hamcrest-library', hamcrestVersion)]
}

static String buildDependency(String pack, String dependency, String version) {
    return "${pack}:${dependency}:${version}"
}
